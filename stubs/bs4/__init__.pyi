"""
Type stubs for beautifulsoup4
"""

from typing import Any, List, Optional, Union, Dict

class BeautifulSoup:
    def __init__(self, markup: str, features: Optional[str] = None, **kwargs: Any) -> None: ...
    
    def find_all(self, name: Optional[str] = None, attrs: Optional[Dict[str, Any]] = None, 
                 recursive: bool = True, text: Optional[Union[str, List[str]]] = None, 
                 limit: Optional[int] = None, **kwargs: Any) -> List[Any]: ...
    
    def find(self, name: Optional[str] = None, attrs: Optional[Dict[str, Any]] = None, 
             recursive: bool = True, text: Optional[Union[str, List[str]]] = None, **kwargs: Any) -> Optional[Any]: ...
    
    def select(self, selector: str) -> List[Any]: ...
    
    def stripped_strings(self) -> List[str]: ...
    
    def strings(self) -> List[str]: ...
    
    def get_text(self, separator: str = "", strip: bool = False) -> str: ...

class Tag:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    
    @property
    def attrs(self) -> Dict[str, Any]: ...
    
    @property
    def href(self) -> str: ...
    
    @property
    def name(self) -> str: ...
    
    @property
    def string(self) -> str: ...
    
    @property
    def text(self) -> str: ...
    
    @property
    def parent(self) -> Optional['Tag']: ...
    
    @property
    def children(self) -> List['Tag']: ...
    
    @property
    def descendants(self) -> List['Tag']: ...
    
    @property
    def next_sibling(self) -> Optional['Tag']: ...
    
    @property
    def previous_sibling(self) -> Optional['Tag']: ...
    
    def get_text(self, separator: str = "", strip: bool = False) -> str: ...
    
    def get(self, key: str, default: Any = None) -> Any: ...
    
    def has_attr(self, key: str) -> bool: ...
    
    def decompose(self) -> None: ...
    
    def extract(self) -> 'Tag': ...
    
    def unwrap(self) -> 'Tag': ...
    
    def wrap(self, new_tag: 'Tag') -> 'Tag': ...
    
    def replace_with(self, new_tag: 'Tag') -> None: ...
    
    def insert(self, position: int, new_tag: 'Tag') -> None: ...
    
    def append(self, new_tag: 'Tag') -> None: ...
    
    def insert_before(self, new_tag: 'Tag') -> None: ...
    
    def insert_after(self, new_tag: 'Tag') -> None: ...
    
    def clear(self) -> None: ...
    
    def extend(self, new_tags: List['Tag']) -> None: ...
    
    def pop(self, index: int = -1) -> 'Tag': ...
    
    def remove(self, tag: 'Tag') -> None: ...
    
    def replace(self, old_tag: 'Tag', new_tag: 'Tag') -> None: ...
    
    def find_next(self, name: Optional[str] = None, attrs: Optional[Dict[str, Any]] = None, 
                  text: Optional[Union[str, List[str]]] = None, **kwargs: Any) -> Optional['Tag']: ...
    
    def find_previous(self, name: Optional[str] = None, attrs: Optional[Dict[str, Any]] = None, 
                      text: Optional[Union[str, List[str]]] = None, **kwargs: Any) -> Optional['Tag']: ...
    
    def find_next_sibling(self, name: Optional[str] = None, attrs: Optional[Dict[str, Any]] = None, 
                          text: Optional[Union[str, List[str]]] = None, **kwargs: Any) -> Optional['Tag']: ...
    
    def find_previous_sibling(self, name: Optional[str] = None, attrs: Optional[Dict[str, Any]] = None, 
                              text: Optional[Union[str, List[str]]] = None, **kwargs: Any) -> Optional['Tag']: ...
    
    def find_parent(self, name: Optional[str] = None, attrs: Optional[Dict[str, Any]] = None, 
                    text: Optional[Union[str, List[str]]] = None, **kwargs: Any) -> Optional['Tag']: ...
    
    def find_parents(self, name: Optional[str] = None, attrs: Optional[Dict[str, Any]] = None, 
                     text: Optional[Union[str, List[str]]] = None, limit: Optional[int] = None, **kwargs: Any) -> List['Tag']: ...
    
    def find_all_next(self, name: Optional[str] = None, attrs: Optional[Dict[str, Any]] = None, 
                      text: Optional[Union[str, List[str]]] = None, limit: Optional[int] = None, **kwargs: Any) -> List['Tag']: ...
    
    def find_all_previous(self, name: Optional[str] = None, attrs: Optional[Dict[str, Any]] = None, 
                          text: Optional[Union[str, List[str]]] = None, limit: Optional[int] = None, **kwargs: Any) -> List['Tag']: ...
    
    def find_all_siblings(self, name: Optional[str] = None, attrs: Optional[Dict[str, Any]] = None, 
                          text: Optional[Union[str, List[str]]] = None, limit: Optional[int] = None, **kwargs: Any) -> List['Tag']: ...
    
    def find_all_children(self, name: Optional[str] = None, attrs: Optional[Dict[str, Any]] = None, 
                          text: Optional[Union[str, List[str]]] = None, limit: Optional[int] = None, **kwargs: Any) -> List['Tag']: ...
    
    def find_all_descendants(self, name: Optional[str] = None, attrs: Optional[Dict[str, Any]] = None, 
                             text: Optional[Union[str, List[str]]] = None, limit: Optional[int] = None, **kwargs: Any) -> List['Tag']: ...
    
    def find_all_parents(self, name: Optional[str] = None, attrs: Optional[Dict[str, Any]] = None, 
                         text: Optional[Union[str, List[str]]] = None, limit: Optional[int] = None, **kwargs: Any) -> List['Tag']: ...
    
    def __getitem__(self, key: str) -> Any: ...
    
    def __contains__(self, key: str) -> bool: ...
